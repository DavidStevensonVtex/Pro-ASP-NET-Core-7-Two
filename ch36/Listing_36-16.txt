@* Listing 36.16 Using the typed base in the Editor.razor file in the Blazor/Forms folders *@

@page "/forms/edit/{id:long}"
@layout EmptyLayout
@inherits OwningComponentBase<DataContext>

<link href="/blazorValidation.css" rel="stylesheet" />

<h4 class="bg-primary text-center text-white p-2">Edit</h4>
<h6 class="bg-info text-center text-white p-2">@FormSubmitMessage</h6>

<FormSpy Person="PersonData">
    <EditForm Model="PersonData" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Person ID</label>
            <InputNumber class="form-control"
                     @bind-Value="PersonData.PersonId" disabled />
        </div>
        <div class="form-group">
            <label>Firstname</label>
            <ValidationMessage For="@(() => PersonData.Firstname)" />
            <InputText class="form-control"
                       @bind-Value="PersonData.Firstname" />
        </div>
        <div class="form-group">
            <label>Surname</label>
            <ValidationMessage For="@(() => PersonData.Surname)" />
            <InputText class="form-control"
                       @bind-Value="PersonData.Surname" />
        </div>
        <div class="form-group">
            <label>Deptartment</label>
            <ValidationMessage For="@(() => PersonData.DepartmentId)" />
            <CustomSelect TValue="long" Values="Departments"
                          Parser="@((string str) => long.Parse(str))"
                          @bind-Value="PersonData.DepartmentId">
                <option selected disabled value="0">
                    Choose a Department
                </option>
            </CustomSelect>
        </div>
        <div class="form-group">
            <label>Location</label>
            <ValidationMessage For="@(() => PersonData.LocationId)" />
            <CustomSelect TValue="long" Values="Locations"
                          Parser="@((string str) => long.Parse(str))"
                          @bind-Value="PersonData.LocationId">
                <option selected disabled value="0">Choose a Location</option>
            </CustomSelect>
        </div>
        <div class="text-center">
            <button type="submit" class="btn btn-primary mt-2">
                Submit
            </button>
            <NavLink class="btn btn-secondary mt-2" href="/forms">
                Back
            </NavLink>
        </div>
    </EditForm>
</FormSpy>

@code {
    [Inject]
    public NavigationManager? NavManager { get; set; }

    // [Inject]
    DataContext? Context => Service;

    [Parameter]
    public long Id { get; set; }

    public Person PersonData { get; set; } = new();

    public IDictionary<string, long> Departments { get; set; }
    = new Dictionary<string, long>();

    public IDictionary<string, long> Locations { get; set; }
        = new Dictionary<string, long>();

    protected async override Task OnParametersSetAsync() {
        if (Context != null) {
            PersonData = await Context.People.FindAsync(Id)
                ?? new Person();
            Departments = await Context.Departments
                .ToDictionaryAsync(d => d.Name, d => d.Departmentid);
            Locations = await Context.Locations
                .ToDictionaryAsync(l => $"{l.City}, {l.State}",
                    l => l.LocationId);
        }
    }

    public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";
    public void HandleValidSubmit() => FormSubmitMessage = "Valid Data Submitted";
    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";
}
